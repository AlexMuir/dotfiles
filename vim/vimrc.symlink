" Auto-install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif

" Plugins
call plug#begin('~/.vim/plugged')

Plug 'flazz/vim-colorschemes'
Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-bundler'
Plug 'vim-ruby/vim-ruby'
Plug 'scrooloose/nerdtree'
Plug 'ervandew/supertab'
Plug 'scrooloose/syntastic'
Plug 'Townk/vim-autoclose'
" Plug 'tpope/vim-endwise' " is annoying me 
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat' " Lets us repeat plugin commands (eg. surround)
Plug 'othree/html5.vim' " SVG support
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'kana/vim-textobj-user' " Needed by above
Plug 'godlygeek/tabular' " Needed by vim-markdown
Plug 'plasticboy/vim-markdown'
"Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'pangloss/vim-javascript'
Plug 'albfan/ag.vim'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'


call plug#end()


set nocompatible
syntax enable 	"Enable syntax highlighting

set backspace=indent,eol,start " Backspace over everything

set noerrorbells visualbell t_vb=
if has('autocmd')
    autocmd GUIEnter * set visualbell t_vb=
endif


" auto reload vimrc when editing it
autocmd! bufwritepost .vimrc source ~/.vimrc


" Appearance
colorscheme wombat
set linespace=3 " Spacing between lines in GUI
set cursorline " Highlight the line with the cursor on

" Tabs and Spaces
set shiftwidth=2
set tabstop=2
set softtabstop=2
set expandtab
set shiftwidth=2

" UI config
set number      " Show line numbers
set showcmd     " show last command in bottom bar

" Searching
set hlsearch    " Highlight searches
" clear the command line and search highlighting
noremap <C-l> :nohlsearch<CR> 

" Wrap gitcommit file types at the appropriate length
filetype indent plugin on

" Disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

"turn off needless toolbar on gvim/mvim
set guioptions-=T

if has("gui_running")
  if has("gui_mac") || has("gui_macvim")
    set guifont=Menlo:h13
    " key binding for Command-T to behave properly
    " uncomment to replace the Mac Command-T key to Command-T plugin
    macmenu &File.New\ Tab key=<nop>
    map <D-t> :CtrlP<CR>
  endif
endif

" Map to CtrlP finder3yy
nnoremap <leader>t :CtrlP<CR>
let g:ctrlp_working_path_mode = 2
" use silver searcher for ctrlp
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

" Store temporary files in a central spot
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp


set clipboard=unnamed	" yank to the system register (*) by default
set mouse=a     " mouse mode

" Ruby text objects need matchit enabled
runtime macros/matchit.vim

" Writing mode
function! s:goyo_enter()
  colorscheme habiLight
  Limelight
  if has('gui_running')
    set fullscreen
    set background=light
    set linespace=7
  endif
endfunction

function! s:goyo_leave()
  Limelight!
  colorscheme wombat
  if has('gui_running')
    set nofullscreen
    set background=dark
    set linespace=0
  endif
endfunction

autocmd User GoyoEnter nested call <SID>goyo_enter()
autocmd User GoyoLeave nested call <SID>goyo_leave()

" Lets me rename a file in one fell swoop.
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>n :call RenameFile()<cr>

" Don't fold code
set nofoldenable
